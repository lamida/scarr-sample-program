=============================================================
ScaRR Offline Measurement Statistics
=============================================================
Offline Measurement Size: 8
Number of Checkpoints: 6
Number of List of Actions: 12
=============================================================
Checkpoints and LoA Details: 
=============================================================
Checkpoint 0
LoA Size: 2

Checkpoint_0_A: 
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %z = alloca i32, align 4
  %s = alloca i32, align 4
  %t = alloca i64, align 8
  %r = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %a, align 4
  store i32 2, i32* %b, align 4
  %0 = load i32, i32* %a, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else3

Checkpoint_0_B: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end
LoA Details: 

LOA_0: 
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %z = alloca i32, align 4
  %s = alloca i32, align 4
  %t = alloca i64, align 8
  %r = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %a, align 4
  store i32 2, i32* %b, align 4
  %0 = load i32, i32* %a, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else3

LOA_1: 
if.else3:                                         ; preds = %entry
  call void @b2()
  br label %if.end4
=============================================================
=============================================================
Checkpoint 1
LoA Size: 2


Checkpoint_1_A: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end

Checkpoint_1_B: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end
LoA Details: 

LOA_0: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end

LOA_1: 
while.body:                                       ; preds = %while.cond
  call void @f()
  %3 = load i32, i32* %z, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %z, align 4
  br label %while.cond
=============================================================
=============================================================
Checkpoint 2
LoA Size: 2


Checkpoint_2_A: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end

Checkpoint_2_B: 
sw.default:                                       ; preds = %while.end
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  br label %sw.epilog
LoA Details: 

LOA_0: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end

LOA_1: 
while.end:                                        ; preds = %while.cond
  store i32 4, i32* %s, align 4
  %4 = load i32, i32* %s, align 4
  switch i32 %4, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb6
    i32 3, label %sw.bb7
    i32 4, label %sw.bb8
  ]
=============================================================
=============================================================
Checkpoint 3
LoA Size: 2


Checkpoint_3_A: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end

Checkpoint_3_B: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb
  %call9 = call i64 @time(i64* %t)
  %conv = trunc i64 %call9 to i32
  call void @srand(i32 %conv)
  %call10 = call i32 @rand()
  %rem = srem i32 %call10, 4
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  switch i32 %5, label %sw.default15 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb12
    i32 3, label %sw.bb13
    i32 4, label %sw.bb14
  ]
LoA Details: 

LOA_0: 
while.cond:                                       ; preds = %while.body, %if.end4
  %2 = load i32, i32* %z, align 4
  %cmp5 = icmp sgt i32 %2, 0
  br i1 %cmp5, label %while.body, label %while.end

LOA_1: 
while.end:                                        ; preds = %while.cond
  store i32 4, i32* %s, align 4
  %4 = load i32, i32* %s, align 4
  switch i32 %4, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb6
    i32 3, label %sw.bb7
    i32 4, label %sw.bb8
  ]
=============================================================
=============================================================
Checkpoint 4
LoA Size: 0


Checkpoint_4_A: 
sw.default:                                       ; preds = %while.end
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  br label %sw.epilog

Checkpoint_4_B: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb
  %call9 = call i64 @time(i64* %t)
  %conv = trunc i64 %call9 to i32
  call void @srand(i32 %conv)
  %call10 = call i32 @rand()
  %rem = srem i32 %call10, 4
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  switch i32 %5, label %sw.default15 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb12
    i32 3, label %sw.bb13
    i32 4, label %sw.bb14
  ]
=============================================================
=============================================================
Checkpoint 5
LoA Size: 2


Checkpoint_5_A: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb
  %call9 = call i64 @time(i64* %t)
  %conv = trunc i64 %call9 to i32
  call void @srand(i32 %conv)
  %call10 = call i32 @rand()
  %rem = srem i32 %call10, 4
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  switch i32 %5, label %sw.default15 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb12
    i32 3, label %sw.bb13
    i32 4, label %sw.bb14
  ]

Checkpoint_5_B: 
sw.default15:                                     ; preds = %sw.epilog
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  br label %sw.epilog17
LoA Details: 

LOA_0: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb
  %call9 = call i64 @time(i64* %t)
  %conv = trunc i64 %call9 to i32
  call void @srand(i32 %conv)
  %call10 = call i32 @rand()
  %rem = srem i32 %call10, 4
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  switch i32 %5, label %sw.default15 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb12
    i32 3, label %sw.bb13
    i32 4, label %sw.bb14
  ]

LOA_1: 
sw.default15:                                     ; preds = %sw.epilog
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  br label %sw.epilog17
=============================================================
=============================================================
Checkpoint 6
LoA Size: 2


Checkpoint_6_A: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb
  %call9 = call i64 @time(i64* %t)
  %conv = trunc i64 %call9 to i32
  call void @srand(i32 %conv)
  %call10 = call i32 @rand()
  %rem = srem i32 %call10, 4
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  switch i32 %5, label %sw.default15 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb12
    i32 3, label %sw.bb13
    i32 4, label %sw.bb14
  ]

Checkpoint_6_B: 
sw.epilog17:                                      ; preds = %sw.default15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
LoA Details: 

LOA_0: 
sw.epilog:                                        ; preds = %sw.default, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb
  %call9 = call i64 @time(i64* %t)
  %conv = trunc i64 %call9 to i32
  call void @srand(i32 %conv)
  %call10 = call i32 @rand()
  %rem = srem i32 %call10, 4
  %add = add nsw i32 1, %rem
  store i32 %add, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  switch i32 %5, label %sw.default15 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb12
    i32 3, label %sw.bb13
    i32 4, label %sw.bb14
  ]

LOA_1: 
sw.bb14:                                          ; preds = %sw.epilog
  call void @g4()
  br label %sw.epilog17
=============================================================
=============================================================
Checkpoint 7
LoA Size: 0


Checkpoint_7_A: 
sw.default15:                                     ; preds = %sw.epilog
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  br label %sw.epilog17

Checkpoint_7_B: 
sw.epilog17:                                      ; preds = %sw.default15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
=============================================================

BC¿ﬁ5     b0$MYæf}˚¥O»$D2 !  l  !       Å#ëA»I29íÑ%ãbÄEBíB§28K
2RàHpƒ!#DáåAíd»± CFà …2RÑ*(*ê1|∞\ë ≈»   â      2"H	 bF !+$ò!%$ò'Ö§ê`Rd\ $eÇÄõ#@‘P–@C m tF LêHÕÄ+∞FŒå†#9G 
Dç@+ŸÅ bs¡   &|¿;¯;†É6ÄáqhvHw®|hÉspázÿ`
Â–Ì†Â– w z0r†s m rpq†s z0r– w z`t†v@mêv@z`t–ÊÄp†q x–ÓÄzv†s z`t–≥rÄJíAÜå	4Bv	"†B≤}aá¡¿%    @@ ;$¬Ü.	     ÿ!)F1xI  @   ¿	2é·K    ÄÄ vHñq`ê     Ïê8„¬ 	     ÿ!âÅqbê     Ïê–¿(Ü1H    ÄÄ vHn`$    @@ ;$:0ä°í  Ä     Äí≈`I  @   ¿)éc8É$      `HÖ
Ç          @ C*U0           R¡Ç†          @ ¿êJ          Ä ÜT≥(           0§¢Ö@         Ä  Ä!U-
           ©lAP            `HÖÇ          @ C*]           RÒÇ†          @ ¿ê           Ä ÜT‚PH@          0§:¬        Ä  Ä!’:          Hl(å6  ê 3   2òLêå	&G∆C
⁄âc†Ù4≥Ÿe2(Ìô”Ú9$ñá›c¥ÇÜz‚(=ç√lvôJªAÛÚ¯Ì&ÉƒÚ∞{åVP—F,•Á†qòÕ.ìtîÉ“s–8Ãfó…
e †Ù4≥Ÿe≤B2(=ç√lvô¨P∆JœA„0õ]&+®hséÅ“s–8Ãfó…
mŒ2PzáŸÏ2Y°ÕyJœA„0õ]&+¥9”@È9hf≥Àde‹o::Ì>É–eyôX	  ±  ó   3Äƒ·f=àC8Ñ√åBÄyxsòqÊ ÌÙÄ3B¬¡Œ°f0=àC8ÑÉÃ=»C=å=Ãxåtp{yHáppzpvxáp áÃÏê·0n0„P3ƒﬁ!ÿ!¬af0â;ºÉ;–C9¥<ºÉ<Ñ;Ãv`{h7hárh7Äápêáp`v(v¯vxáwÄá_áqáròáyòÅ,ÓÓ‡ı¿Ï0b»°‰°Ã°‰°‹a !ƒÅ a÷êC9»C9òC9»C9∏√8îC8à;î√/ºÉ<¸Ç;‘;∞√«iápXárpÉthx`átát†áŒSÓ ÚP‰ê„@· ÏP3 (‹¡¬A“!‹Å‹‡‰·ÍfQ8∞C:úÉ;ÃP$v`{h7`áwxxòQLÙêP3j aË!ﬁ¡~‰°Ã!aTÖÉ8Ã√;∞C=–C9¸¬<‰C;à√;∞√å≈
áyòáwátz(ròÅ\„Ï¿ÂPÛ0#¡“A‰·ÿ·ﬁfH;∞É=¥ÉÑ√8åC9Ã√<∏¡9»√;‘<ÃH¥qv`qáqXá€∆Ï`Ì‡ Â0Â ˆPn„0Â0Û‡È‡‰P¯0#‚Ïa¬Åÿ·Ï!Ê!ƒ!ÿ!Ë!f ù;ºC=∏9îÉ9ÃXºppwxzzHáwp  y   "   rH Cà	r2H #Ååëë—D†(d<12Béê!£(l ä  wchar_sizeclang version 10.0.0-4ubuntu1 #Ãå 0h0√0ƒÅ #Å	 àçÕÆÕ•Ìç¨é≠Ã≈å-ÏlnîÄHÖçÕÆÕ%ç¨Ãçnî†  ©  !   
r(áwÄzXpòC=∏√8∞C9–√ÇÊ∆°ËA¬¡Ê!Ë!ﬁ¡4„`ÁP· ‰@· ÁPÙ∞ÄÅy(áp`vxáqz(rXpú√8¥;§É=î√kÿ!‹·‹ ‰a‹ ËÅ¬a–°»a¬Åÿ—     Ã<§É;ú;î=†É<îC8ê√   a   %   D,      ƒäÇË µ°é@ (5†‘`®c J(5    3s£0l@≈ P¿∆pC`Ä¡,C # Ç`‡åA1K0å ÇÅC≈,¡†·@    ˆ2Ãs —LvR¯D3ú¿Å>±HÑµ◊H·O—! Àb1Ö ,K     a      A,      DG ®uÜ@•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®u»@•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®uA•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®uHA•ï   # Ç`‡x¡àÄ (úÜ   PÕa∂B¿≤     a      A,      DG ®uàA•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®u∆A•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®uB•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®uFB•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a      A,      DG ®uÜB•ï   # Ç`‡xÅÜ   PÕa∂B¿≤     a   ¨   V,      ƒF ä†(j†àé PÍ8êÖr   3s£0¡0g0
3s£0¡0g0
3s£0A1g@
3s£0l@Œ 4 √D— l7Ã2E0b@  J–¡∆pC0Å¡,É0# Ç`†∞¡,1b@  äÃ≥∆àÄ (m0K`4 ≥!l7ìÃ2 I0b@   ê¬L0 ≥«∞±\@√,L‡úÅ¢K0h–å ÇÅ“≥œàÄ (l0Kå ÇÅ≤≥œàÄ (j0Kå ÇÅ3—,¡3bP  001( iÇ A0Ä“‡Œ–@`ÿÄÄÇ àça&†Œ RÉ®$4òF ¡@°ÉYÇjƒÄ @î9ò%®F ¡@ëÉYÇjƒÄ @î8ò%®F
 ¡¿—lñ†"åç¬Å   B   6d¿≤‘ÙAíÂA]_ƒ!Y~‘ˆ5íÂád˘AP„'qHñı}R¯D3‡vd¿≤‘˙H·O—òœ0ÇÈÛ‘G` ÖO4ÉÒÛ‰á†X≤~‡ò	Ç”T˜êHñO<»‚WÄ ÖO,qüÉ"Y˛@ µLÜ3Ãc1`2Apåd˘Q ‘2’π¡‹¿Å>±HÑ¿0\≈"Y>Ò ãc‘˚(÷Å,Ñ/8Õ`0FDL∞‹Ç!Y~Ë«`Hñª—“D3Eò∞,Ω’ìŸëÕŸ)íÂÅ∞,'Ä Ö?Dc_Bb»B¯D3        q      2"Ñ¯ËIÄ∞LÄ“(QNÄˆHqXÄòhëZÄ∫     e  ª   î‡      o   2   L      X       X      ‡      °      ¥             ‡                 H      H      ˇˇˇˇ $  J      J      ˇˇˇˇ$  P      P      ˇˇˇˇ $  R      R      ˇˇˇˇ $  S      S      ˇˇˇˇ $  T      T      ˇˇˇˇ $  U      U      ˇˇˇˇ $  V      V      ˇˇˇˇ $  X      X      ˇˇˇˇ $  Z      Z      ˇˇˇˇ $  \      \      ˇˇˇˇ $  ^      ^      ˇˇˇˇ $  b      b      ˇˇˇˇ$  g      g      ˇˇˇˇ$  k      k      ˇˇˇˇ$  ø             ˇˇˇˇ   ≈            ˇˇˇˇ   Õ      
      ˇˇˇˇ   ’            ˇˇˇˇ   ›            ˇˇˇˇ   Â            ˇˇˇˇ   Ì      "      ˇˇˇˇ   ı      (      ˇˇˇˇ   ˝      .      ˇˇˇˇ        4      ˇˇˇˇ     	   :      ˇˇˇˇ     	   A      ˇˇˇˇ       ]  K   î?   .str.str.1.str.2.str.3.str.4.str.5.str.6.str.7.str.8.str.9.str.10.str.11b1printfb2cedfg1g2g3g4mainsrandtimerand13.0.0git 8472f8308855a4242747051dbc774306b9f169afx86_64-pc-linux-gnubranches2.c.L.str.L.str.1.L.str.2.L.str.3.L.str.4.L.str.5.L.str.6.L.str.7.L.str.8.L.str.9.L.str.10.L.str.11     